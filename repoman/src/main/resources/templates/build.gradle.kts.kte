@import org.metaborg.repoman.meta.Defaults
@import org.metaborg.repoman.meta.RepoMetadata
@param meta: RepoMetadata
@if(meta.files.gradleRootProject.update)
// !! THIS FILE WAS GENERATED USING repoman !!
// Modify `repo.yaml` instead and use `repoman` to update this file
// See: https://github.com/metaborg/metaborg-gradle/

@endif
import org.metaborg.convention.Person
import org.metaborg.convention.MavenPublishConventionExtension

// Workaround for issue: https://youtrack.jetbrains.com/issue/KTIJ-19369
@Suppress("DSL_SCOPE_VIOLATION")
plugins {
    id("org.metaborg.convention.root-project")
    alias(libs.plugins.gitonium)
    alias(libs.plugins.spoofax.gradle.langspec) apply false
}

@if(meta.files.gradleRootProject.createPublishTasks)
rootProjectConvention {
    // Add `publishAll` and `publish` tasks that delegate to the subprojects and included builds.
    registerPublishTasks.set(true)
}
@endif

allprojects {
    apply(plugin = "org.metaborg.gitonium")

    @if(meta.mainBranch != Defaults.MAIN_BRANCH || meta.releaseTagPrefix != Defaults.RELEASE_TAG_PREFIX)
    // Configure Gitonium before setting the version
    gitonium {
        @if(meta.mainBranch != Defaults.MAIN_BRANCH)
        mainBranch.set("${meta.mainBranch}")
        @endif
        @if(meta.releaseTagPrefix != Defaults.RELEASE_TAG_PREFIX)
        tagPrefix.set("${meta.releaseTagPrefix}")
        @endif
    }
    @endif

    version = gitonium.version
    group = "${meta.mavenGroup}"

    pluginManager.withPlugin("org.metaborg.convention.maven-publish") {
        extensions.configure(MavenPublishConventionExtension::class.java) {
            repoOwner.set("${meta.repoOwner}")
            repoName.set("${meta.repoName}")

            metadata {
                inceptionYear.set("${meta.inceptionYear}")
                @if(meta.developers.isNotEmpty())
                developers.set(listOf(
                    @for(entry in meta.developers)
                    Person("${entry.name}", email = ${if (entry.email != null) "\"${entry.email}\"" else "null"}, id = ${if (entry.id != null) "\"${entry.id}\"" else "null"}),
                    @endfor
                ))
                @endif
                @if(meta.contributors.isNotEmpty())
                contributors.set(listOf(
                    @for(entry in meta.contributors)
                    Person("${entry.name}", email = ${if (entry.email != null) "\"${entry.email}\"" else "null"}, id = ${if (entry.id != null) "\"${entry.id}\"" else "null"}),
                    @endfor
                ))
                @endif
            }
        }
    }
}
